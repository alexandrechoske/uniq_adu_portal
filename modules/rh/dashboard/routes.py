"""
Rotas - Dashboard Executivo RH
Endpoints para visualiza√ß√£o de indicadores executivos de RH

Dashboard Executivo (Vis√£o da Diretoria):
- 5 KPIs Principais: Headcount, Turnover, Tempo M√©dio Contrata√ß√£o, Vagas Abertas, Custo Total
- 4 Gr√°ficos: Evolu√ß√£o Headcount, Admiss√µes vs Desligamentos, Turnover por Departamento, Vagas Abertas por Mais Tempo
"""

from flask import render_template, jsonify, request
from modules.auth.routes import login_required
from decorators.perfil_decorators import perfil_required
from . import dashboard_rh_bp
from extensions import supabase_admin as supabase
from datetime import datetime, timedelta
from dateutil.relativedelta import relativedelta
from collections import defaultdict

# ========================================
# P√ÅGINAS HTML
# ========================================

@dashboard_rh_bp.route('/')
@login_required
@perfil_required('rh', 'dashboard')
def dashboard_executivo():
    """
    P√°gina principal do Dashboard Executivo de RH
    Exibe indicadores e m√©tricas consolidadas
    """
    try:
        # Carregar departamentos para o filtro
        response_deps = supabase.table('rh_departamentos').select('id, nome_departamento').order('nome_departamento').execute()
        departamentos = response_deps.data if response_deps.data else []
        
        dados_dashboard = {
            'data_atualizacao': datetime.now().strftime('%d/%m/%Y %H:%M'),
            'departamentos': departamentos
        }
        
        return render_template(
            'dashboard/dashboard_executivo.html',
            dados=dados_dashboard
        )
        
    except Exception as e:
        print(f"‚ùå Erro ao carregar dashboard executivo: {str(e)}")
        return render_template(
            'dashboard/dashboard_executivo.html',
            error=str(e)
        ), 500


# ========================================
# APIs REST
# ========================================

@dashboard_rh_bp.route('/api/dados', methods=['GET'])
@login_required
@perfil_required('rh', 'dashboard')
def api_dados_dashboard():
    """
    API: Retorna dados consolidados do dashboard
    Query Params:
        - periodo_inicio: data in√≠cio (YYYY-MM-DD)
        - periodo_fim: data fim (YYYY-MM-DD)
        - departamentos: array de IDs de departamentos (opcional)
    """
    try:
        # Obter par√¢metros de filtro
        periodo_inicio = request.args.get('periodo_inicio')
        periodo_fim = request.args.get('periodo_fim')
        departamentos_ids = request.args.getlist('departamentos[]')
        
        # Definir per√≠odo padr√£o se n√£o fornecido (Este Ano)
        if not periodo_inicio or not periodo_fim:
            hoje = datetime.now()
            periodo_inicio = f"{hoje.year}-01-01"
            periodo_fim = hoje.strftime('%Y-%m-%d')
        
        print(f"\nüìä ========== DASHBOARD EXECUTIVO RH ==========")
        print(f"üìä Per√≠odo: {periodo_inicio} a {periodo_fim}")
        print(f"üìä Departamentos filtrados: {departamentos_ids if departamentos_ids else 'Todos'}")
        
        # Calcular KPIs
        kpis = calcular_kpis(periodo_inicio, periodo_fim, departamentos_ids)
        
        # Calcular dados para gr√°ficos
        graficos = calcular_graficos(periodo_inicio, periodo_fim, departamentos_ids)
        
        # Calcular dados para tabelas
        tabelas = calcular_tabelas(periodo_inicio, periodo_fim, departamentos_ids)
        
        print(f"‚úÖ Dashboard calculado com sucesso!")
        print(f"========================================\n")
        
        return jsonify({
            'success': True,
            'data': {
                'periodo': {
                    'inicio': periodo_inicio,
                    'fim': periodo_fim
                },
                'kpis': kpis,
                'graficos': graficos,
                'tabelas': tabelas,
                'timestamp': datetime.now().isoformat()
            }
        })
        
    except Exception as e:
        print(f"‚ùå Erro na API de dados do dashboard: {str(e)}")
        import traceback
        traceback.print_exc()
        return jsonify({
            'success': False,
            'message': str(e)
        }), 500


@dashboard_rh_bp.route('/api/refresh', methods=['POST'])
@login_required
@perfil_required('rh', 'dashboard')
def api_refresh_dados():
    """
    API: For√ßa atualiza√ß√£o dos dados do dashboard
    """
    try:
        return jsonify({
            'success': True,
            'message': 'Dados atualizados com sucesso',
            'timestamp': datetime.now().isoformat()
        })
        
    except Exception as e:
        print(f"‚ùå Erro ao atualizar dados: {str(e)}")
        return jsonify({
            'success': False,
            'message': str(e)
        }), 500


# ========================================
# FUN√á√ïES DE C√ÅLCULO - KPIs
# ========================================

def calcular_kpis(periodo_inicio, periodo_fim, departamentos_ids=None):
    """
    Calcula os 10 KPIs principais do Dashboard Executivo
    
    KPIs:
    1. Headcount - Total de colaboradores ativos
    2. Turnover - Taxa de rotatividade (%)
    3. Tempo M√©dio Contrata√ß√£o - Dias para fechar vagas
    4. Vagas Abertas - Total de vagas em aberto
    5. Custo Sal√°rios - Soma dos sal√°rios mensais (folha pura)
    6. Custo Benef√≠cios - Soma dos benef√≠cios mensais
    7. Custo Total - Sal√°rios + Benef√≠cios
    8. M√©dia Candidatos - M√©dia de candidatos por vaga
    9. Tempo M√©dio de Casa - Tempo m√©dio de perman√™ncia
    10. Idade M√©dia - Idade m√©dia dos colaboradores
    """
    print("\nüöÄ Calculando KPIs do Dashboard Executivo...")
    if departamentos_ids:
        print(f"   üîç Filtrando KPIs por departamentos: {departamentos_ids}")
    
    kpis = {}
    
    # KPI 1: Headcount (Colaboradores Ativos) - COM FILTRO
    kpis['headcount'] = calcular_kpi_headcount(departamentos_ids)
    
    # KPI 2: Turnover (Taxa de Rotatividade) - COM FILTRO
    kpis['turnover'] = calcular_kpi_turnover(periodo_inicio, periodo_fim, kpis['headcount']['valor'], departamentos_ids)
    
    # KPI 3: Tempo M√©dio de Contrata√ß√£o
    kpis['tempo_contratacao'] = calcular_kpi_tempo_contratacao(periodo_inicio, periodo_fim)
    
    # KPI 4: Vagas Abertas
    kpis['vagas_abertas'] = calcular_kpi_vagas_abertas()
    
    # KPI 5, 6, 7: Custos (Sal√°rios, Benef√≠cios e Total) - COM FILTRO
    custos = calcular_kpi_custo_total(departamentos_ids)
    kpis['custo_salarios'] = {
        'valor': custos['custo_salarios'],
        'variacao': 0,
        'label': 'Custo Sal√°rios (Folha)',
        'icone': 'mdi-currency-usd',
        'cor': '#28a745'
    }
    kpis['custo_beneficios'] = {
        'valor': custos['custo_beneficios'],
        'variacao': 0,
        'label': 'Custo Benef√≠cios',
        'icone': 'mdi-gift',
        'cor': '#17a2b8'
    }
    kpis['custo_total'] = {
        'valor': custos['custo_total'],
        'variacao': 0,
        'label': 'Custo Total (Pessoal)',
        'icone': 'mdi-cash-multiple',
        'cor': '#fd7e14'
    }
    
    # KPI 8: M√©dia de Candidatos por Vaga
    kpis['media_candidatos'] = calcular_kpi_media_candidatos()
    
    # KPI 9: Tempo M√©dio de Casa
    kpis['tempo_medio_casa'] = calcular_kpi_tempo_medio_casa()
    
    # KPI 10: Idade M√©dia
    kpis['idade_media'] = calcular_kpi_idade_media()
    
    print("‚úÖ KPIs calculados com sucesso!\n")
    return kpis


def calcular_kpi_headcount(departamentos_ids=None):
    """
    KPI 1: Headcount - Total de Colaboradores Ativos
    
    L√≥gica:
    - COUNT(*) WHERE status = 'Ativo' AND data_desligamento IS NULL
    - Se departamentos_ids fornecido, filtrar por esses departamentos
    """
    try:
        query = supabase.table('rh_colaboradores')\
            .select('id', count='exact')\
            .eq('status', 'Ativo')\
            .is_('data_desligamento', 'null')
        
        # Aplicar filtro de departamento se fornecido
        if departamentos_ids:
            query = query.in_('departamento_id', departamentos_ids)
        
        response = query.execute()
        
        headcount = response.count if response.count is not None else 0
        
        if departamentos_ids:
            print(f"   ‚úÖ Headcount (filtrado): {headcount}")
        else:
            print(f"   ‚úÖ Headcount: {headcount}")
        
        return {
            'valor': headcount,
            'variacao': 0,
            'label': 'Colaboradores Ativos',
            'icone': 'mdi-account-group',
            'cor': '#6f42c1'
        }
    except Exception as e:
        print(f"   ‚ùå Erro ao calcular headcount: {str(e)}")
        return {
            'valor': 0,
            'variacao': 0,
            'label': 'Colaboradores Ativos',
            'icone': 'mdi-account-group',
            'cor': '#6f42c1'
        }


def calcular_kpi_turnover(periodo_inicio, periodo_fim, headcount_atual, departamentos_ids=None):
    """
    KPI 2: Turnover - Taxa de Rotatividade (%)
    
    F√≥rmula:
    - Turnover (%) = (Desligamentos no Per√≠odo / Headcount M√©dio) √ó 100
    
    L√≥gica:
    - Usar data_desligamento da tabela rh_colaboradores
    - N√ÉO usar hist√≥rico (pode ter m√∫ltiplos registros)
    - Se departamentos_ids fornecido, filtrar por esses departamentos
    """
    try:
        # Contar desligamentos no per√≠odo usando data_desligamento
        query_demissoes = supabase.table('rh_colaboradores')\
            .select('id', count='exact')\
            .not_.is_('data_desligamento', 'null')\
            .gte('data_desligamento', periodo_inicio)\
            .lte('data_desligamento', periodo_fim)
        
        # Aplicar filtro de departamento se fornecido
        if departamentos_ids:
            query_demissoes = query_demissoes.in_('departamento_id', departamentos_ids)
        
        response_demissoes = query_demissoes.execute()
        
        desligamentos = response_demissoes.count if response_demissoes.count is not None else 0
        
        # Calcular turnover (usar headcount atual como aproxima√ß√£o do m√©dio)
        if headcount_atual == 0:
            turnover_taxa = 0
        else:
            turnover_taxa = (desligamentos / headcount_atual) * 100
        
        print(f"   ‚úÖ Turnover: {turnover_taxa:.1f}% ({desligamentos} desligamentos / {headcount_atual} headcount)")
        
        return {
            'valor': round(turnover_taxa, 1),
            'variacao': 0,
            'label': 'Taxa de Rotatividade',
            'icone': 'mdi-account-arrow-right',
            'cor': '#dc3545' if turnover_taxa > 10 else '#28a745'
        }
    except Exception as e:
        print(f"   ‚ùå Erro ao calcular turnover: {str(e)}")
        return {
            'valor': 0,
            'variacao': 0,
            'label': 'Taxa de Rotatividade',
            'icone': 'mdi-account-arrow-right',
            'cor': '#28a745'
        }


def calcular_kpi_tempo_contratacao(periodo_inicio, periodo_fim):
    """
    KPI 3: Tempo M√©dio de Contrata√ß√£o (Dias)
    
    F√≥rmula:
    - AVG(data_fechamento - data_abertura) para vagas fechadas no per√≠odo
    """
    try:
        # Buscar vagas fechadas no per√≠odo
        response_vagas = supabase.table('rh_vagas')\
            .select('data_abertura, data_fechamento')\
            .eq('status', 'Fechada')\
            .not_.is_('data_fechamento', 'null')\
            .gte('data_fechamento', periodo_inicio)\
            .lte('data_fechamento', periodo_fim)\
            .execute()
        
        vagas = response_vagas.data if response_vagas.data else []
        
        if not vagas:
            print(f"   ‚ö†Ô∏è  Tempo Contrata√ß√£o: Nenhuma vaga fechada no per√≠odo")
            return {
                'valor': 0,
                'variacao': 0,
                'label': 'Tempo M√©dio Contrata√ß√£o (dias)',
                'icone': 'mdi-clock-outline',
                'cor': '#17a2b8'
            }
        
        # Calcular diferen√ßa em dias
        total_dias = 0
        count_vagas = 0
        
        for vaga in vagas:
            if vaga.get('data_abertura') and vaga.get('data_fechamento'):
                try:
                    data_abertura = datetime.strptime(vaga['data_abertura'][:10], '%Y-%m-%d')
                    data_fechamento = datetime.strptime(vaga['data_fechamento'][:10], '%Y-%m-%d')
                    dias = (data_fechamento - data_abertura).days
                    if dias >= 0:
                        total_dias += dias
                        count_vagas += 1
                except:
                    continue
        
        tempo_medio = round(total_dias / count_vagas) if count_vagas > 0 else 0
        
        print(f"   ‚úÖ Tempo M√©dio Contrata√ß√£o: {tempo_medio} dias ({count_vagas} vagas fechadas)")
        
        return {
            'valor': tempo_medio,
            'variacao': 0,
            'label': 'Tempo M√©dio Contrata√ß√£o (dias)',
            'icone': 'mdi-clock-outline',
            'cor': '#ffc107' if tempo_medio > 30 else '#28a745'
        }
    except Exception as e:
        print(f"   ‚ùå Erro ao calcular tempo de contrata√ß√£o: {str(e)}")
        return {
            'valor': 0,
            'variacao': 0,
            'label': 'Tempo M√©dio Contrata√ß√£o (dias)',
            'icone': 'mdi-clock-outline',
            'cor': '#17a2b8'
        }


def calcular_kpi_vagas_abertas():
    """
    KPI 4: Vagas Abertas - Total de Posi√ß√µes em Aberto
    """
    try:
        response = supabase.table('rh_vagas')\
            .select('id', count='exact')\
            .eq('status', 'Aberta')\
            .execute()
        
        vagas_abertas = response.count if response.count is not None else 0
        
        print(f"   ‚úÖ Vagas Abertas: {vagas_abertas}")
        
        return {
            'valor': vagas_abertas,
            'variacao': 0,
            'label': 'Vagas em Aberto',
            'icone': 'mdi-briefcase-outline',
            'cor': '#6f42c1'
        }
    except Exception as e:
        print(f"   ‚ùå Erro ao calcular vagas abertas: {str(e)}")
        return {
            'valor': 0,
            'variacao': 0,
            'label': 'Vagas em Aberto',
            'icone': 'mdi-briefcase-outline',
            'cor': '#6f42c1'
        }


def calcular_kpi_media_candidatos():
    """
    KPI 6: M√©dia de Candidatos por Vaga
    
    F√≥rmula:
    - Total de candidatos / Total de vagas com candidatos
    - Considera apenas vagas que receberam candidaturas
    """
    try:
        print(f"   üîç Calculando m√©dia de candidatos por vaga")
        
        # Buscar total de candidatos
        response_candidatos = supabase.table('rh_candidatos')\
            .select('id, vaga_id', count='exact')\
            .execute()
        
        total_candidatos = response_candidatos.count if response_candidatos.count is not None else 0
        candidatos_data = response_candidatos.data if response_candidatos.data else []
        
        print(f"   üìä Total de candidatos: {total_candidatos}")
        
        # Contar vagas √∫nicas que receberam candidaturas
        vagas_com_candidatos = set()
        for candidato in candidatos_data:
            if candidato.get('vaga_id'):
                vagas_com_candidatos.add(candidato['vaga_id'])
        
        total_vagas = len(vagas_com_candidatos)
        print(f"   üìä Total de vagas com candidatos: {total_vagas}")
        
        # Calcular m√©dia
        if total_vagas > 0:
            media = round(total_candidatos / total_vagas, 1)
        else:
            print(f"   ‚ö†Ô∏è  M√©dia Candidatos: Nenhuma vaga com candidatos encontrada")
            media = 0
        
        print(f"   ‚úÖ M√©dia de Candidatos por Vaga: {media}")
        
        return {
            'valor': media,
            'variacao': 0,
            'label': 'M√©dia Candidatos/Vaga',
            'icone': 'mdi-account-multiple-outline',
            'cor': '#20c997' if media >= 5 else '#ffc107'
        }
    except Exception as e:
        print(f"   ‚ùå Erro ao calcular m√©dia de candidatos: {str(e)}")
        import traceback
        traceback.print_exc()
        return {
            'valor': 0,
            'variacao': 0,
            'label': 'M√©dia Candidatos/Vaga',
            'icone': 'mdi-account-multiple-outline',
            'cor': '#17a2b8'
        }


def calcular_kpi_tempo_medio_casa():
    """
    KPI 7: Tempo M√©dio de Casa (Anos)
    
    F√≥rmula:
    - Para cada colaborador ativo, calcular: data_atual - data_admissao
    - Retornar a m√©dia em anos
    """
    try:
        print(f"   üîç Calculando tempo m√©dio de casa")
        
        # Buscar colaboradores ativos com data de admiss√£o
        response = supabase.table('rh_colaboradores')\
            .select('id, data_admissao')\
            .eq('status', 'Ativo')\
            .is_('data_desligamento', 'null')\
            .not_.is_('data_admissao', 'null')\
            .execute()
        
        colaboradores = response.data if response.data else []
        print(f"   üìä Total de colaboradores ativos com data de admiss√£o: {len(colaboradores)}")
        
        if not colaboradores:
            print(f"   ‚ö†Ô∏è  Tempo M√©dio de Casa: Nenhum colaborador ativo encontrado")
            return {
                'valor': 0,
                'variacao': 0,
                'label': 'Tempo M√©dio de Casa',
                'icone': 'mdi-history',
                'cor': '#6f42c1',
                'unidade': 'anos'
            }
        
        # Calcular tempo de casa para cada colaborador
        hoje = datetime.now()
        tempos_casa = []
        
        for colab in colaboradores:
            data_admissao_str = colab.get('data_admissao')
            if data_admissao_str:
                try:
                    data_admissao = datetime.strptime(data_admissao_str[:10], '%Y-%m-%d')
                    tempo_dias = (hoje - data_admissao).days
                    tempo_anos = tempo_dias / 365.25  # Considera anos bissextos
                    tempos_casa.append(tempo_anos)
                except Exception as ex:
                    print(f"      ‚ö†Ô∏è Erro ao processar data de admiss√£o: {data_admissao_str} - {str(ex)}")
                    continue
        
        if not tempos_casa:
            print(f"   ‚ö†Ô∏è  Tempo M√©dio de Casa: Nenhuma data v√°lida processada")
            tempo_medio = 0
        else:
            tempo_medio = round(sum(tempos_casa) / len(tempos_casa), 1)
        
        print(f"   ‚úÖ Tempo M√©dio de Casa: {tempo_medio} anos ({len(tempos_casa)} colaboradores processados)")
        
        return {
            'valor': tempo_medio,
            'variacao': 0,
            'label': 'Tempo M√©dio de Casa',
            'icone': 'mdi-history',
            'cor': '#6f42c1',
            'unidade': 'anos'
        }
    except Exception as e:
        print(f"   ‚ùå Erro ao calcular tempo m√©dio de casa: {str(e)}")
        import traceback
        traceback.print_exc()
        return {
            'valor': 0,
            'variacao': 0,
            'label': 'Tempo M√©dio de Casa',
            'icone': 'mdi-history',
            'cor': '#6f42c1',
            'unidade': 'anos'
        }


def calcular_kpi_idade_media():
    """
    KPI 8: Idade M√©dia dos Colaboradores (Anos)
    
    F√≥rmula:
    - Para cada colaborador ativo, calcular: data_atual - data_nascimento
    - Retornar a m√©dia em anos
    """
    try:
        print(f"   üîç Calculando idade m√©dia dos colaboradores")
        
        # Buscar colaboradores ativos com data de nascimento
        response = supabase.table('rh_colaboradores')\
            .select('id, data_nascimento')\
            .eq('status', 'Ativo')\
            .is_('data_desligamento', 'null')\
            .not_.is_('data_nascimento', 'null')\
            .execute()
        
        colaboradores = response.data if response.data else []
        print(f"   üìä Total de colaboradores ativos com data de nascimento: {len(colaboradores)}")
        
        if not colaboradores:
            print(f"   ‚ö†Ô∏è  Idade M√©dia: Nenhum colaborador ativo encontrado")
            return {
                'valor': 0,
                'variacao': 0,
                'label': 'Idade M√©dia',
                'icone': 'mdi-cake-variant',
                'cor': '#6f42c1',
                'unidade': 'anos'
            }
        
        # Calcular idade para cada colaborador
        hoje = datetime.now()
        idades = []
        
        for colab in colaboradores:
            data_nascimento_str = colab.get('data_nascimento')
            if data_nascimento_str:
                try:
                    data_nascimento = datetime.strptime(data_nascimento_str[:10], '%Y-%m-%d')
                    idade_dias = (hoje - data_nascimento).days
                    idade_anos = idade_dias / 365.25  # Considera anos bissextos
                    
                    # Validar idade razo√°vel (entre 18 e 80 anos)
                    if 18 <= idade_anos <= 80:
                        idades.append(idade_anos)
                    else:
                        print(f"      ‚ö†Ô∏è Idade fora do range v√°lido ignorada: {idade_anos:.1f} anos")
                except Exception as ex:
                    print(f"      ‚ö†Ô∏è Erro ao processar data de nascimento: {data_nascimento_str} - {str(ex)}")
                    continue
        
        if not idades:
            print(f"   ‚ö†Ô∏è  Idade M√©dia: Nenhuma data v√°lida processada")
            idade_media = 0
        else:
            idade_media = round(sum(idades) / len(idades))
        
        print(f"   ‚úÖ Idade M√©dia: {idade_media} anos ({len(idades)} colaboradores processados)")
        
        return {
            'valor': idade_media,
            'variacao': 0,
            'label': 'Idade M√©dia',
            'icone': 'mdi-cake-variant',
            'cor': '#6f42c1',
            'unidade': 'anos'
        }
    except Exception as e:
        print(f"   ‚ùå Erro ao calcular idade m√©dia: {str(e)}")
        import traceback
        traceback.print_exc()
        return {
            'valor': 0,
            'variacao': 0,
            'label': 'Idade M√©dia',
            'icone': 'mdi-cake-variant',
            'cor': '#6f42c1',
            'unidade': 'anos'
        }


def calcular_kpi_custo_total(departamentos_ids=None):
    """
    KPI 5, 6, 7: Custos de Pessoal (Sal√°rios, Benef√≠cios e Total)
    
    Retorna 3 valores separados:
    - custo_salarios: Soma dos sal√°rios mensais
    - custo_beneficios: Soma de todos os benef√≠cios (calculados pela view)
    - custo_total: Sal√°rios + Benef√≠cios
    
    L√≥gica:
    - Usa a view vw_colaboradores_atual que j√° tem total_beneficios calculado
    - View j√° traz √∫ltimo sal√°rio e benef√≠cios de cada colaborador ativo
    - Se departamentos_ids fornecido, filtrar por esses departamentos
    """
    try:
        print(f"   üîç Buscando custos da view vw_colaboradores_atual...")
        
        # üî• OTIMIZA√á√ÉO: Usar view que j√° calcula tudo
        query = supabase.table('vw_colaboradores_atual')\
            .select('salario_mensal, total_beneficios')
        
        # Aplicar filtro de departamento se fornecido
        if departamentos_ids:
            query = query.in_('departamento_id', departamentos_ids)
        
        response = query.execute()
        
        colaboradores = response.data if response.data else []
        
        print(f"   üìä Total de colaboradores ativos: {len(colaboradores)}")
        
        if not colaboradores:
            print(f"   ‚ö†Ô∏è  Custos: Nenhum colaborador ativo encontrado")
            return {
                'custo_salarios': 0,
                'custo_beneficios': 0,
                'custo_total': 0
            }
        
        # Calcular custos separados
        custo_salarios = 0.0
        custo_beneficios = 0.0
        
        colaboradores_com_salario = 0
        colaboradores_com_beneficios = 0
        
        # DEBUG: Mostrar amostra dos primeiros 3 registros
        for idx, colab in enumerate(colaboradores[:3]):
            print(f"      Colaborador {idx+1}: salario={colab.get('salario_mensal')}, beneficios={colab.get('total_beneficios')}")
        
        for colab in colaboradores:
            # Processar sal√°rio
            salario_mensal = colab.get('salario_mensal')
            if salario_mensal:
                try:
                    valor_salario = float(salario_mensal)
                    custo_salarios += valor_salario
                    colaboradores_com_salario += 1
                except (ValueError, TypeError) as e:
                    print(f"      ‚ö†Ô∏è Erro ao converter sal√°rio: {salario_mensal}")
            
            # Processar benef√≠cios (j√° calculados pela view)
            total_beneficios = colab.get('total_beneficios')
            if total_beneficios:
                try:
                    valor_beneficios = float(total_beneficios)
                    if valor_beneficios > 0:
                        custo_beneficios += valor_beneficios
                        colaboradores_com_beneficios += 1
                except (ValueError, TypeError) as e:
                    print(f"      ‚ö†Ô∏è Erro ao converter benef√≠cios: {total_beneficios}")
        
        custo_total = custo_salarios + custo_beneficios
        
        print(f"   ‚úÖ Custo Sal√°rios: R$ {custo_salarios:,.2f} ({colaboradores_com_salario} colaboradores)")
        print(f"   ‚úÖ Custo Benef√≠cios: R$ {custo_beneficios:,.2f} ({colaboradores_com_beneficios} colaboradores)")
        print(f"   ‚úÖ Custo Total: R$ {custo_total:,.2f}")
        
        if custo_salarios == 0 and len(colaboradores) > 0:
            print(f"   ‚ö†Ô∏è  ATEN√á√ÉO: Nenhum sal√°rio encontrado! Verifique se os dados est√£o corretos.")
        
        return {
            'custo_salarios': custo_salarios,
            'custo_beneficios': custo_beneficios,
            'custo_total': custo_total
        }
    except Exception as e:
        print(f"   ‚ùå Erro ao calcular custos: {str(e)}")
        import traceback
        traceback.print_exc()
        return {
            'custo_salarios': 0,
            'custo_beneficios': 0,
            'custo_total': 0
        }


# ========================================
# FUN√á√ïES DE C√ÅLCULO - GR√ÅFICOS
# ========================================

def calcular_graficos(periodo_inicio, periodo_fim, departamentos_ids=None):
    """
    Calcula os gr√°ficos principais do Dashboard Executivo
    
    Gr√°ficos:
    1. Evolu√ß√£o do Headcount (Linha - 12 meses)
    2. Admiss√µes vs Desligamentos (Barras agrupadas)
    3. Turnover por Departamento (Barras - Top 5)
    4. Distribui√ß√£o por Departamento (Pizza)
    
    Args:
        departamentos_ids: Lista de IDs de departamentos para filtrar (opcional)
    """
    print("üöÄ Calculando Gr√°ficos do Dashboard Executivo...")
    if departamentos_ids:
        print(f"   üîç Filtrando por departamentos: {departamentos_ids}")
    
    graficos = {}
    
    # Gr√°fico 1 e 2: Evolu√ß√£o e Admiss√µes/Desligamentos (usam mesmos dados) - ‚úÖ FILTRO IMPLEMENTADO
    dados_evolucao = calcular_grafico_evolucao_headcount(periodo_inicio, periodo_fim, departamentos_ids)
    graficos['evolucao_headcount'] = dados_evolucao
    graficos['admissoes_desligamentos'] = {
        'labels': dados_evolucao['labels'],
        'datasets': {
            'admissoes': dados_evolucao['datasets']['admissoes'],
            'desligamentos': dados_evolucao['datasets']['desligamentos']
        }
    }
    
    # Gr√°fico 3: Turnover por Departamento (Top 5)
    # TODO: Implementar filtro de departamentos para turnover
    graficos['turnover_departamento'] = calcular_grafico_turnover_departamento(periodo_inicio, periodo_fim)
    
    # Gr√°fico 4: Custo Total por Departamento (substituindo distribui√ß√£o) - ‚úÖ FILTRO IMPLEMENTADO
    graficos['custo_departamento'] = calcular_grafico_custo_departamento(departamentos_ids)
    
    # Gr√°fico 5: Distribui√ß√£o por Departamento - ‚úÖ FILTRO IMPLEMENTADO
    graficos['distribuicao_departamento'] = calcular_grafico_distribuicao_departamento(departamentos_ids)
    
    print("‚úÖ Gr√°ficos calculados com sucesso!\n")
    return graficos


def calcular_grafico_evolucao_headcount(periodo_inicio, periodo_fim, departamentos_ids=None):
    """
    Gr√°fico 1: Evolu√ß√£o do Headcount (Linha - 12 meses)
    
    Datasets:
    - Headcount no final de cada m√™s
    - Admiss√µes no m√™s
    - Desligamentos no m√™s
    
    Otimiza√ß√£o:
    - Buscar TODOS os eventos do per√≠odo de uma vez
    - Agrupar em Python (O(n) ao inv√©s de 24 queries)
    - Se departamentos_ids fornecido, filtrar por esses departamentos
    """
    try:
        print(f"   üîç Calculando evolu√ß√£o de headcount para per√≠odo {periodo_inicio} a {periodo_fim}")
        if departamentos_ids:
            print(f"   üîç Filtrando evolu√ß√£o por departamentos: {departamentos_ids}")
        
        # Gerar lista de meses no per√≠odo
        data_inicio = datetime.strptime(periodo_inicio, '%Y-%m-%d')
        data_fim = datetime.strptime(periodo_fim, '%Y-%m-%d')
        
        meses = []
        current = data_inicio.replace(day=1)
        while current <= data_fim:
            meses.append(current.strftime('%Y-%m'))
            current += relativedelta(months=1)
        
        print(f"   üìä Total de meses a processar: {len(meses)}")
        
        # üî• OTIMIZA√á√ÉO: Buscar todas as admiss√µes do per√≠odo de uma vez
        query_admissoes = supabase.table('rh_colaboradores')\
            .select('data_admissao')\
            .not_.is_('data_admissao', 'null')\
            .gte('data_admissao', periodo_inicio)\
            .lte('data_admissao', periodo_fim)
        
        # Aplicar filtro de departamento se fornecido
        if departamentos_ids:
            query_admissoes = query_admissoes.in_('departamento_id', departamentos_ids)
        
        response_admissoes = query_admissoes.execute()
        
        # üî• OTIMIZA√á√ÉO: Buscar todos os desligamentos do per√≠odo de uma vez
        query_desligamentos = supabase.table('rh_colaboradores')\
            .select('data_desligamento')\
            .not_.is_('data_desligamento', 'null')\
            .gte('data_desligamento', periodo_inicio)\
            .lte('data_desligamento', periodo_fim)
        
        # Aplicar filtro de departamento se fornecido
        if departamentos_ids:
            query_desligamentos = query_desligamentos.in_('departamento_id', departamentos_ids)
        
        response_desligamentos = query_desligamentos.execute()
        
        print(f"   üìä Admiss√µes encontradas: {len(response_admissoes.data or [])}")
        print(f"   üìä Desligamentos encontrados: {len(response_desligamentos.data or [])}")
        
        # DEBUG: Mostrar primeiras 3 datas de cada tipo
        if response_admissoes.data:
            print(f"   üîç Primeiras 3 admiss√µes:")
            for i, adm in enumerate(response_admissoes.data[:3]):
                print(f"      {i+1}. {adm.get('data_admissao')}")
        
        if response_desligamentos.data:
            print(f"   üîç Primeiros 3 desligamentos:")
            for i, desl in enumerate(response_desligamentos.data[:3]):
                print(f"      {i+1}. {desl.get('data_desligamento')}")
        
        # Agrupar eventos por m√™s em Python
        admissoes_por_mes = defaultdict(int)
        desligamentos_por_mes = defaultdict(int)
        
        for evento in (response_admissoes.data or []):
            data_admissao = evento.get('data_admissao')
            if data_admissao:
                mes = data_admissao[:7]  # YYYY-MM
                admissoes_por_mes[mes] += 1
        
        for evento in (response_desligamentos.data or []):
            data_desligamento = evento.get('data_desligamento')
            if data_desligamento:
                mes = data_desligamento[:7]  # YYYY-MM
                desligamentos_por_mes[mes] += 1
        
        # Buscar headcount inicial (antes do per√≠odo)
        # Contar colaboradores admitidos antes do per√≠odo_inicio e que ainda estavam ativos
        query_headcount_inicial = supabase.table('rh_colaboradores')\
            .select('id', count='exact')\
            .lt('data_admissao', periodo_inicio)\
            .or_(f'data_desligamento.is.null,data_desligamento.gte.{periodo_inicio}')
        
        # Aplicar filtro de departamento se fornecido
        if departamentos_ids:
            query_headcount_inicial = query_headcount_inicial.in_('departamento_id', departamentos_ids)
        
        response_headcount_inicial = query_headcount_inicial.execute()
        
        headcount_inicial = response_headcount_inicial.count if response_headcount_inicial.count is not None else 0
        print(f"   üìä Headcount inicial (antes de {periodo_inicio}): {headcount_inicial}")
        
        # Montar arrays de dados calculando headcount progressivo
        labels = []
        headcount_data = []
        admissoes_data = []
        desligamentos_data = []
        
        headcount_acumulado = headcount_inicial
        
        # Retornar meses no formato YYYY-MM (JavaScript far√° a formata√ß√£o para legibilidade)
        for mes in meses:
            try:
                admissoes_mes = admissoes_por_mes.get(mes, 0)
                desligamentos_mes = desligamentos_por_mes.get(mes, 0)
                
                # Calcular headcount progressivo: headcount anterior + admiss√µes - desligamentos
                headcount_acumulado = headcount_acumulado + admissoes_mes - desligamentos_mes
                
                labels.append(mes)  # Formato: "2024-10"
                headcount_data.append(headcount_acumulado)
                admissoes_data.append(admissoes_mes)
                desligamentos_data.append(desligamentos_mes)
            except Exception as ex:
                print(f"      ‚ö†Ô∏è Erro ao processar m√™s {mes}: {str(ex)}")
                continue
        
        print(f"   ‚úÖ Evolu√ß√£o Headcount: {len(labels)} meses processados")
        print(f"      Headcount inicial: {headcount_inicial}")
        print(f"      Headcount final: {headcount_data[-1] if headcount_data else 0}")
        print(f"      Total admiss√µes per√≠odo: {sum(admissoes_data)}")
        print(f"      Total desligamentos per√≠odo: {sum(desligamentos_data)}")
        print(f"      Varia√ß√£o l√≠quida: {sum(admissoes_data) - sum(desligamentos_data)}")
        
        # Log detalhado dos primeiros 3 meses
        print(f"      Detalhamento por m√™s (primeiros 3):")
        for i in range(min(3, len(labels))):
            print(f"         {labels[i]}: Admiss√µes={admissoes_data[i]}, Demiss√µes={desligamentos_data[i]}")
        
        return {
            'labels': labels,
            'datasets': {
                'headcount': headcount_data,
                'admissoes': admissoes_data,
                'desligamentos': desligamentos_data
            }
        }
    except Exception as e:
        print(f"   ‚ùå Erro ao calcular evolu√ß√£o headcount: {str(e)}")
        import traceback
        traceback.print_exc()
        return {
            'labels': [],
            'datasets': {
                'headcount': [],
                'admissoes': [],
                'desligamentos': []
            }
        }


def calcular_grafico_turnover_departamento(periodo_inicio, periodo_fim):
    """
    Gr√°fico 3: Turnover por Departamento (Barras - Top 5)
    
    L√≥gica:
    - Para cada departamento, calcular turnover (%)
    - Turnover = (Desligamentos / Headcount do Depto) √ó 100
    - Ordenar por turnover DESC e pegar Top 5
    
    Otimiza√ß√£o:
    - Buscar todos os hist√≥ricos de uma vez
    - Mapear colaborador ‚Üí departamento em Python
    """
    try:
        print(f"   üîç Calculando turnover por departamento para per√≠odo {periodo_inicio} a {periodo_fim}")
        
        # Buscar departamentos
        response_deps = supabase.table('rh_departamentos')\
            .select('id, nome_departamento')\
            .execute()
        
        departamentos = response_deps.data if response_deps.data else []
        print(f"   üìä Total de departamentos encontrados: {len(departamentos)}")
        
        if not departamentos:
            print(f"   ‚ö†Ô∏è  Turnover por Departamento: Nenhum departamento encontrado")
            return {'labels': [], 'data': []}
        
        # Buscar colaboradores demitidos no per√≠odo
        response_demitidos = supabase.table('rh_colaboradores')\
            .select('id')\
            .not_.is_('data_desligamento', 'null')\
            .gte('data_desligamento', periodo_inicio)\
            .lte('data_desligamento', periodo_fim)\
            .execute()
        
        colaboradores_demitidos_ids = [c['id'] for c in (response_demitidos.data or [])]
        print(f"   üìä Colaboradores demitidos no per√≠odo: {len(colaboradores_demitidos_ids)}")
        
        # üî• OTIMIZA√á√ÉO: Buscar TODOS os hist√≥ricos de uma vez
        response_hist = supabase.table('rh_historico_colaborador')\
            .select('colaborador_id, departamento_id')\
            .not_.is_('departamento_id', 'null')\
            .order('data_evento', desc=True)\
            .execute()
        
        print(f"   üìä Total de registros no hist√≥rico: {len(response_hist.data or [])}")
        
        # Mapear colaborador ‚Üí departamento (√∫ltimo registro)
        colaborador_dept_map = {}
        for hist in (response_hist.data or []):
            colab_id = hist['colaborador_id']
            if colab_id not in colaborador_dept_map:
                colaborador_dept_map[colab_id] = hist['departamento_id']
        
        print(f"   üìä Colaboradores mapeados para departamentos: {len(colaborador_dept_map)}")
        
        # Contar demiss√µes por departamento
        demissoes_por_dept = defaultdict(int)
        for colab_id in colaboradores_demitidos_ids:
            dept_id = colaborador_dept_map.get(colab_id)
            if dept_id:
                demissoes_por_dept[dept_id] += 1
        
        # Contar headcount por departamento
        headcount_por_dept = defaultdict(set)
        for colab_id, dept_id in colaborador_dept_map.items():
            headcount_por_dept[dept_id].add(colab_id)
        
        # Calcular turnover por departamento
        dados_turnover = []
        
        for dept in departamentos:
            dept_id = dept['id']
            dept_nome = dept['nome_departamento']
            
            demissoes = demissoes_por_dept.get(dept_id, 0)
            headcount_dept = len(headcount_por_dept.get(dept_id, set()))
            
            if headcount_dept > 0:
                turnover = (demissoes / headcount_dept) * 100
                dados_turnover.append({
                    'departamento': dept_nome,
                    'turnover': round(turnover, 1),
                    'demissoes': demissoes,
                    'headcount': headcount_dept
                })
        
        # Ordenar por turnover DESC e pegar Top 5
        dados_turnover_sorted = sorted(dados_turnover, key=lambda x: x['turnover'], reverse=True)[:5]
        
        labels = [d['departamento'] for d in dados_turnover_sorted]
        data = [d['turnover'] for d in dados_turnover_sorted]
        
        print(f"   ‚úÖ Turnover por Departamento: Top {len(labels)}")
        print(f"      Departamentos com maior turnover: {labels}")
        print(f"      Valores de turnover (%): {data}")
        for d in dados_turnover_sorted:
            print(f"      {d['departamento']}: {d['turnover']}% ({d['demissoes']}/{d['headcount']})")
        
        return {
            'labels': labels,
            'data': data
        }
    except Exception as e:
        print(f"   ‚ùå Erro ao calcular turnover por departamento: {str(e)}")
        import traceback
        traceback.print_exc()
        return {'labels': [], 'data': []}


def calcular_grafico_distribuicao_departamento(departamentos_ids=None):
    """
    Gr√°fico 4: Distribui√ß√£o de Colaboradores por Departamento (Pizza)
    
    L√≥gica:
    - Contar colaboradores ativos por departamento
    - Retornar labels (nomes dos departamentos) e data (quantidades)
    
    Args:
        departamentos_ids: Lista de IDs de departamentos para filtrar (opcional)
    """
    try:
        print(f"   üîç Calculando distribui√ß√£o por departamento")
        if departamentos_ids:
            print(f"   üîç Filtrando por departamentos: {departamentos_ids}")
        
        # Buscar departamentos (aplicar filtro se fornecido)
        query_deps = supabase.table('rh_departamentos')\
            .select('id, nome_departamento')
        
        if departamentos_ids:
            query_deps = query_deps.in_('id', departamentos_ids)
        
        response_deps = query_deps.execute()
        
        departamentos = response_deps.data if response_deps.data else []
        print(f"   üìä Total de departamentos: {len(departamentos)}")
        
        if not departamentos:
            print(f"   ‚ö†Ô∏è  Distribui√ß√£o por Departamento: Nenhum departamento encontrado")
            return {'labels': [], 'data': []}
        
        # Buscar hist√≥rico de todos os colaboradores ativos
        response_colabs = supabase.table('rh_colaboradores')\
            .select('id')\
            .eq('status', 'Ativo')\
            .is_('data_desligamento', 'null')\
            .execute()
        
        colaboradores_ids = [c['id'] for c in (response_colabs.data or [])]
        print(f"   üìä Total de colaboradores ativos: {len(colaboradores_ids)}")
        
        if not colaboradores_ids:
            print(f"   ‚ö†Ô∏è  Distribui√ß√£o por Departamento: Nenhum colaborador ativo")
            return {'labels': [], 'data': []}
        
        # Buscar √∫ltimo departamento de cada colaborador
        query_hist = supabase.table('rh_historico_colaborador')\
            .select('colaborador_id, departamento_id')\
            .in_('colaborador_id', colaboradores_ids)\
            .not_.is_('departamento_id', 'null')
        
        # Aplicar filtro de departamentos se fornecido
        if departamentos_ids:
            query_hist = query_hist.in_('departamento_id', departamentos_ids)
        
        response_hist = query_hist.order('data_evento', desc=True).execute()
        
        print(f"   üìä Registros no hist√≥rico: {len(response_hist.data or [])}")
        
        # Mapear colaborador ‚Üí departamento (√∫ltimo registro)
        colaborador_dept_map = {}
        for hist in (response_hist.data or []):
            colab_id = hist['colaborador_id']
            if colab_id not in colaborador_dept_map:
                colaborador_dept_map[colab_id] = hist['departamento_id']
        
        # Contar colaboradores por departamento
        dept_counts = defaultdict(int)
        for dept_id in colaborador_dept_map.values():
            dept_counts[dept_id] += 1
        
        # Criar mapa de ID ‚Üí Nome do departamento
        dept_map = {d['id']: d['nome_departamento'] for d in departamentos}
        
        # Montar dados do gr√°fico
        labels = []
        data = []
        
        for dept_id, count in dept_counts.items():
            dept_nome = dept_map.get(dept_id, 'Sem Departamento')
            labels.append(dept_nome)
            data.append(count)
        
        # Ordenar por quantidade DESC
        if labels and data:
            combined = sorted(zip(labels, data), key=lambda x: x[1], reverse=True)
            labels, data = zip(*combined)
            labels = list(labels)
            data = list(data)
        
        print(f"   ‚úÖ Distribui√ß√£o por Departamento: {len(labels)} departamentos")
        print(f"      Departamentos: {labels}")
        print(f"      Quantidades: {data}")
        
        return {
            'labels': labels,
            'data': data
        }
    except Exception as e:
        print(f"   ‚ùå Erro ao calcular distribui√ß√£o por departamento: {str(e)}")
        import traceback
        traceback.print_exc()
        return {'labels': [], 'data': []}


def calcular_grafico_custo_departamento(departamentos_ids=None):
    """
    Gr√°fico 5: Custo Total (Pessoal) por Departamento
    
    L√≥gica:
    - Para cada departamento, somar: sal√°rio_mensal + benef√≠cios (vale_alimentacao + ajuda_de_custo)
    - Retornar labels (nomes dos departamentos) e data (custo total em R$)
    - Ordenar por custo DESC (maior centro de custo primeiro)
    
    Args:
        departamentos_ids: Lista de IDs de departamentos para filtrar (opcional)
    """
    try:
        print(f"   üîç Calculando custo total por departamento")
        if departamentos_ids:
            print(f"   üîç Filtrando por departamentos: {departamentos_ids}")
        
        # Buscar departamentos (aplicar filtro se fornecido)
        query_deps = supabase.table('rh_departamentos')\
            .select('id, nome_departamento')
        
        if departamentos_ids:
            query_deps = query_deps.in_('id', departamentos_ids)
        
        response_deps = query_deps.execute()
        
        departamentos = response_deps.data if response_deps.data else []
        print(f"   üìä Total de departamentos: {len(departamentos)}")
        
        if not departamentos:
            print(f"   ‚ö†Ô∏è  Custo por Departamento: Nenhum departamento encontrado")
            return {'labels': [], 'data': []}
        
        # Buscar colaboradores ativos
        response_colabs = supabase.table('rh_colaboradores')\
            .select('id')\
            .eq('status', 'Ativo')\
            .is_('data_desligamento', 'null')\
            .execute()
        
        colaboradores_ids = [c['id'] for c in (response_colabs.data or [])]
        print(f"   üìä Total de colaboradores ativos: {len(colaboradores_ids)}")
        
        if not colaboradores_ids:
            print(f"   ‚ö†Ô∏è  Custo por Departamento: Nenhum colaborador ativo")
            return {'labels': [], 'data': []}
        
        # Buscar √∫ltimo hist√≥rico de cada colaborador (com sal√°rio, benef√≠cios e departamento)
        query_hist = supabase.table('rh_historico_colaborador')\
            .select('colaborador_id, departamento_id, salario_mensal, beneficios_jsonb')\
            .in_('colaborador_id', colaboradores_ids)
        
        # Aplicar filtro de departamentos se fornecido
        if departamentos_ids:
            query_hist = query_hist.in_('departamento_id', departamentos_ids)
        
        response_hist = query_hist.order('data_evento', desc=True).execute()
        
        print(f"   üìä Registros no hist√≥rico: {len(response_hist.data or [])}")
        
        # Mapear colaborador ‚Üí √∫ltimo hist√≥rico (departamento, sal√°rio, benef√≠cios)
        colaborador_info_map = {}
        for hist in (response_hist.data or []):
            colab_id = hist['colaborador_id']
            if colab_id not in colaborador_info_map:
                colaborador_info_map[colab_id] = hist
        
        # Calcular custo total por departamento
        custo_por_dept = defaultdict(float)
        
        for colab_id, info in colaborador_info_map.items():
            dept_id = info.get('departamento_id')
            if not dept_id:
                continue
            
            # Sal√°rio mensal
            salario = float(info.get('salario_mensal') or 0)
            
            # Benef√≠cios (vale_alimentacao + ajuda_de_custo)
            beneficios_jsonb = info.get('beneficios_jsonb') or {}
            
            vale_alimentacao = 0
            ajuda_de_custo = 0
            
            if isinstance(beneficios_jsonb, dict):
                # Estrutura: {"beneficios_padrao": {"vale_alimentacao": 635.00}, "remuneracao_adicional": {"ajuda_de_custo": 700.00}}
                beneficios_padrao = beneficios_jsonb.get('beneficios_padrao') or {}
                remuneracao_adicional = beneficios_jsonb.get('remuneracao_adicional') or {}
                
                vale_alimentacao = float(beneficios_padrao.get('vale_alimentacao') or 0)
                ajuda_de_custo = float(remuneracao_adicional.get('ajuda_de_custo') or 0)
            
            custo_total_colaborador = salario + vale_alimentacao + ajuda_de_custo
            custo_por_dept[dept_id] += custo_total_colaborador
        
        # Criar mapa de ID ‚Üí Nome do departamento
        dept_map = {d['id']: d['nome_departamento'] for d in departamentos}
        
        # Montar dados do gr√°fico
        labels = []
        data = []
        
        for dept_id, custo_total in custo_por_dept.items():
            dept_nome = dept_map.get(dept_id, 'Sem Departamento')
            labels.append(dept_nome)
            data.append(round(custo_total, 2))
        
        # Ordenar por custo DESC (maior centro de custo primeiro)
        if labels and data:
            combined = sorted(zip(labels, data), key=lambda x: x[1], reverse=True)
            labels, data = zip(*combined)
            labels = list(labels)
            data = list(data)
        
        print(f"   ‚úÖ Custo por Departamento: {len(labels)} departamentos")
        print(f"      Departamentos: {labels}")
        print(f"      Custos (R$): {data}")
        if labels and data:
            print(f"      Maior custo: {labels[0]} - R$ {data[0]:,.2f}")
            print(f"      Custo total geral: R$ {sum(data):,.2f}")
        
        # Recalcular separando sal√°rios e benef√≠cios
        salarios_por_dept = defaultdict(float)
        beneficios_por_dept = defaultdict(float)
        
        for colab_id, info in colaborador_info_map.items():
            dept_id = info.get('departamento_id')
            if not dept_id:
                continue
            
            # Sal√°rio mensal
            salario = float(info.get('salario_mensal') or 0)
            salarios_por_dept[dept_id] += salario
            
            # Benef√≠cios (vale_alimentacao + ajuda_de_custo)
            beneficios_jsonb = info.get('beneficios_jsonb') or {}
            
            vale_alimentacao = 0
            ajuda_de_custo = 0
            
            if isinstance(beneficios_jsonb, dict):
                beneficios_padrao = beneficios_jsonb.get('beneficios_padrao') or {}
                remuneracao_adicional = beneficios_jsonb.get('remuneracao_adicional') or {}
                
                vale_alimentacao = float(beneficios_padrao.get('vale_alimentacao') or 0)
                ajuda_de_custo = float(remuneracao_adicional.get('ajuda_de_custo') or 0)
            
            beneficios_total = vale_alimentacao + ajuda_de_custo
            beneficios_por_dept[dept_id] += beneficios_total
        
        # Preparar dados separados para sal√°rios e benef√≠cios
        salarios_data = []
        beneficios_data = []
        
        for dept_nome in labels:
            # Encontrar o ID do departamento pelo nome
            dept_id = [d['id'] for d in departamentos if d['nome_departamento'] == dept_nome]
            if dept_id:
                dept_id = dept_id[0]
                salarios_data.append(round(salarios_por_dept[dept_id], 2))
                beneficios_data.append(round(beneficios_por_dept[dept_id], 2))
            else:
                salarios_data.append(0)
                beneficios_data.append(0)
        
        print(f"      Sal√°rios (R$): {salarios_data}")
        print(f"      Benef√≠cios (R$): {beneficios_data}")
        
        return {
            'labels': labels,
            'data': data,  # Total (mant√©m compatibilidade)
            'salarios': salarios_data,  # NOVO: Apenas sal√°rios
            'beneficios': beneficios_data  # NOVO: Apenas benef√≠cios
        }
    except Exception as e:
        print(f"   ‚ùå Erro ao calcular custo por departamento: {str(e)}")
        import traceback
        traceback.print_exc()
        return {'labels': [], 'data': []}


# ========================================
# FUN√á√ïES DE C√ÅLCULO - TABELAS
# ========================================

def calcular_tabelas(periodo_inicio, periodo_fim, departamentos_ids=None):
    """
    Calcula dados para tabelas do Dashboard
    
    Tabelas:
    1. Vagas Abertas por Mais Tempo (Top 5)
    """
    print("üöÄ Calculando Tabelas do Dashboard Executivo...")
    
    tabelas = {}
    
    # Tabela 1: Vagas Abertas por Mais Tempo
    tabelas['vagas_abertas_mais_tempo'] = calcular_tabela_vagas_abertas_mais_tempo()
    
    print("‚úÖ Tabelas calculadas com sucesso!\n")
    return tabelas


def calcular_tabela_vagas_abertas_mais_tempo():
    """
    Vis√£o Geral das Vagas em Aberto
    
    Colunas:
    - T√≠tulo da Vaga
    - Cargo
    - Departamento
    - Data Abertura
    - Dias em Aberto
    - Custo Estimado (Sal√°rio Base)
    
    Mostra TODAS as vagas abertas (sem filtro de 15 dias)
    """
    try:
        print(f"   üîç Buscando todas as vagas abertas")
        
        # Buscar TODAS as vagas com status 'Aberta'
        response_vagas = supabase.table('rh_vagas')\
            .select('id, titulo, data_abertura, cargo_id, localizacao, departamento_id, status, salario_base')\
            .eq('status', 'Aberta')\
            .execute()
        
        todas_vagas = response_vagas.data if response_vagas.data else []
        print(f"   üìä Total de vagas com status 'Aberta': {len(todas_vagas)}")
        
        # Contar quantas t√™m data_abertura
        vagas_com_data = [v for v in todas_vagas if v.get('data_abertura')]
        vagas_sem_data = [v for v in todas_vagas if not v.get('data_abertura')]
        print(f"   üìä Vagas COM data_abertura: {len(vagas_com_data)}")
        print(f"   ‚ö†Ô∏è  Vagas SEM data_abertura: {len(vagas_sem_data)}")
        
        if not todas_vagas:
            print(f"   ‚ö†Ô∏è  Nenhuma vaga aberta encontrada")
            return []
        
        # Buscar nomes dos cargos
        cargos_ids = [v['cargo_id'] for v in todas_vagas if v.get('cargo_id')]
        cargos_map = {}
        
        if cargos_ids:
            response_cargos = supabase.table('rh_cargos')\
                .select('id, nome_cargo')\
                .in_('id', cargos_ids)\
                .execute()
            
            for cargo in (response_cargos.data or []):
                cargos_map[cargo['id']] = cargo['nome_cargo']
            
            print(f"   üìä Cargos mapeados: {len(cargos_map)}")
        
        # Buscar nomes dos departamentos
        departamentos_ids = [v['departamento_id'] for v in todas_vagas if v.get('departamento_id')]
        departamentos_map = {}
        
        if departamentos_ids:
            response_deps = supabase.table('rh_departamentos')\
                .select('id, nome_departamento')\
                .in_('id', departamentos_ids)\
                .execute()
            
            for dept in (response_deps.data or []):
                departamentos_map[dept['id']] = dept['nome_departamento']
            
            print(f"   üìä Departamentos mapeados: {len(departamentos_map)}")
        
        # Calcular dados de todas as vagas (SEM FILTRO DE 15 DIAS)
        hoje = datetime.now()
        tabela_vagas = []
        
        for vaga in todas_vagas:
            data_abertura_str = vaga.get('data_abertura', '')
            
            # Se n√£o tem data de abertura, pular
            if not data_abertura_str:
                print(f"      ‚ö†Ô∏è Vaga sem data_abertura: {vaga.get('titulo')} (ID: {vaga.get('id')})")
                continue
            
            try:
                data_abertura = datetime.strptime(data_abertura_str[:10], '%Y-%m-%d')
                dias_aberta = (hoje - data_abertura).days
                
                # Determinar status de urg√™ncia
                if dias_aberta > 60:
                    status_urgencia = 'alta'
                elif dias_aberta > 30:
                    status_urgencia = 'media'
                else:
                    status_urgencia = 'baixa'
                
                # Calcular custo estimado (sal√°rio base)
                salario_base = vaga.get('salario_base')
                custo_estimado = float(salario_base) if salario_base else 0.0
                custo_estimado_formatado = f"R$ {custo_estimado:,.2f}".replace(',', 'X').replace('.', ',').replace('X', '.') if custo_estimado > 0 else "N√£o especificado"
                
                tabela_vagas.append({
                    'id': vaga.get('id'),
                    'titulo': vaga.get('titulo', 'Sem t√≠tulo'),
                    'cargo': cargos_map.get(vaga.get('cargo_id'), 'N√£o especificado'),
                    'departamento': departamentos_map.get(vaga.get('departamento_id'), 'N√£o especificado'),
                    'localizacao': vaga.get('localizacao', 'N√£o especificado'),
                    'data_abertura': data_abertura.strftime('%d/%m/%Y'),
                    'dias_aberto': dias_aberta,
                    'status_urgencia': status_urgencia,
                    'custo_estimado': custo_estimado,
                    'custo_estimado_formatado': custo_estimado_formatado
                })
            except Exception as ex:
                    print(f"      ‚ö†Ô∏è Erro ao processar vaga {vaga.get('id')}: {str(ex)}")
                    continue
        
        # Ordenar por dias_aberto DESC (mostrar TODAS, n√£o apenas top 5)
        tabela_vagas_sorted = sorted(tabela_vagas, key=lambda x: x['dias_aberto'], reverse=True)
        
        print(f"   ‚úÖ Total de vagas processadas: {len(tabela_vagas_sorted)}")
        for v in tabela_vagas_sorted:
            print(f"      {v['titulo']}: {v['dias_aberto']} dias ({v['status_urgencia']}) - {v['custo_estimado_formatado']}")
        
        return tabela_vagas_sorted
        
    except Exception as e:
        print(f"   ‚ùå Erro ao calcular vagas abertas: {str(e)}")
        import traceback
        traceback.print_exc()
        return []
