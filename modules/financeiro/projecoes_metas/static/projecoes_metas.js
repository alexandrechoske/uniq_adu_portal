// Projeções e Metas - JavaScript (adaptado para nova estrutura)let dados = [];let editandoItem = null;let tipoEdicao = null;let tabAtiva = 'metas-anuais';// Inicializaçãodocument.addEventListener('DOMContentLoaded', function() {    console.log('[PROJECOES] Iniciando...');        // Configurar tabs    configurarTabs();        // Configurar eventos    configurarEventos();        // Carregar dados iniciais    buscarDados();});function configurarTabs() {    const tabButtons = document.querySelectorAll('.tab-button');    tabButtons.forEach(button => {        button.addEventListener('click', function() {            const tabId = this.dataset.tab;            switchTab(tabId);        });    });}function switchTab(tabId) {    // Atualizar botões    document.querySelectorAll('.tab-button').forEach(btn => {        btn.classList.remove('active');    });    document.querySelector(`[data-tab="${tabId}"]`).classList.add('active');        // Esconder todos os conteúdos    document.querySelectorAll('.tab-content').forEach(content => {        content.classList.remove('active');    });        // Mostrar conteúdo selecionado    document.getElementById(`content-${tabId}`).classList.add('active');        tabAtiva = tabId;    console.log('[PROJECOES] Mudou para aba:', tabId);}function configurarEventos() {    // Filtros    document.getElementById('btn-buscar').addEventListener('click', buscarDados);    document.getElementById('btn-limpar-filtros').addEventListener('click', limparFiltros);        // Botões de nova meta/projeção    document.getElementById('btn-nova-meta').addEventListener('click', () => abrirModal('meta'));    document.getElementById('btn-nova-projecao').addEventListener('click', () => abrirModal('projecao'));    document.getElementById('btn-nova-meta-mensal').addEventListener('click', () => abrirModal('financeiro'));        // Modais    configurarModais();}function configurarModais() {    // Modal Meta/Projeção Anual    document.getElementById('modal-close-meta').addEventListener('click', () => fecharModal('meta'));    document.getElementById('modal-cancel-meta').addEventListener('click', () => fecharModal('meta'));    document.getElementById('modal-save-meta').addEventListener('click', salvarItem);        // Modal Meta Mensal    document.getElementById('modal-close-mensal').addEventListener('click', () => fecharModal('mensal'));    document.getElementById('modal-cancel-mensal').addEventListener('click', () => fecharModal('mensal'));    document.getElementById('modal-save-mensal').addEventListener('click', salvarItem);        // Fechar modal ao clicar no overlay    document.getElementById('modal-overlay-meta').addEventListener('click', function(e) {        if (e.target === this) fecharModal('meta');    });    document.getElementById('modal-overlay-mensal').addEventListener('click', function(e) {        if (e.target === this) fecharModal('mensal');    });}function buscarDados() {    const ano = document.getElementById('ano-filtro').value;    const tipo = document.getElementById('tipo-filtro').value;        console.log('[PROJECOES] Buscando dados - Ano:', ano, 'Tipo:', tipo);        mostrarLoading(true);        const params = new URLSearchParams({        ano: ano,        tipo: tipo || ''    });        fetch(`/financeiro/projecoes-metas/api/dados?${params}`)        .then(response => response.json())        .then(data => {            if (data.success) {                dados = data.data;                renderizarDados();                atualizarEstatisticas();                console.log('[PROJECOES] Dados carregados:', dados.length, 'itens');            } else {                mostrarToast(data.error || 'Erro ao buscar dados', 'error');            }        })        .catch(error => {            console.error('[PROJECOES] Erro ao buscar dados:', error);            mostrarToast('Erro de comunicação com o servidor', 'error');        })        .finally(() => {            mostrarLoading(false);        });}function renderizarDados() {    renderizarMetasAnuais();    renderizarProjecoesAnuais();    renderizarMetasMensais();}function renderizarMetasAnuais() {    const tbody = document.getElementById('table-metas-anuais-tbody');    const metas = dados.filter(item => item.tipo === 'meta' && !item.mes);        tbody.innerHTML = '';        if (metas.length === 0) {        tbody.innerHTML = `            <tr>                <td colspan="4" style="text-align: center; padding: 40px; color: #666;">                    <i class="mdi mdi-target" style="font-size: 48px; display: block; margin-bottom: 10px;"></i>                    Nenhuma meta anual encontrada                </td>            </tr>        `;        return;    }        metas.forEach(meta => {        const row = document.createElement('tr');        row.innerHTML = `            <td>${meta.ano}</td>            <td><span class="valor-meta">${formatarMoeda(meta.meta)}</span></td>            <td>${formatarData(meta.created_at)}</td>            <td>                <button class="btn btn-primary btn-sm" onclick="editarItem(${meta.id}, 'meta')">                    <i class="mdi mdi-pencil"></i>                </button>                <button class="btn btn-warning btn-sm" onclick="excluirItem(${meta.id})" style="margin-left: 5px;">                    <i class="mdi mdi-delete"></i>                </button>            </td>        `;        tbody.appendChild(row);    });}function renderizarProjecoesAnuais() {    const tbody = document.getElementById('table-projecoes-anuais-tbody');    const projecoes = dados.filter(item => item.tipo === 'projecao' && !item.mes);        tbody.innerHTML = '';        if (projecoes.length === 0) {        tbody.innerHTML = `            <tr>                <td colspan="4" style="text-align: center; padding: 40px; color: #666;">                    <i class="mdi mdi-trending-up" style="font-size: 48px; display: block; margin-bottom: 10px;"></i>                    Nenhuma projeção anual encontrada                </td>            </tr>        `;        return;    }        projecoes.forEach(projecao => {        const row = document.createElement('tr');        row.innerHTML = `            <td>${projecao.ano}</td>            <td><span class="valor-projecao">${formatarMoeda(projecao.meta)}</span></td>            <td>${formatarData(projecao.created_at)}</td>            <td>                <button class="btn btn-success btn-sm" onclick="editarItem(${projecao.id}, 'projecao')">                    <i class="mdi mdi-pencil"></i>                </button>                <button class="btn btn-warning btn-sm" onclick="excluirItem(${projecao.id})" style="margin-left: 5px;">                    <i class="mdi mdi-delete"></i>                </button>            </td>        `;        tbody.appendChild(row);    });}function renderizarMetasMensais() {    const tbody = document.getElementById('table-metas-mensais-tbody');    const mensais = dados.filter(item => item.tipo === 'financeiro' && item.mes);        tbody.innerHTML = '';        if (mensais.length === 0) {        tbody.innerHTML = `            <tr>                <td colspan="5" style="text-align: center; padding: 40px; color: #666;">                    <i class="mdi mdi-calendar-month" style="font-size: 48px; display: block; margin-bottom: 10px;"></i>                    Nenhuma meta mensal encontrada                </td>            </tr>        `;        return;    }        mensais.forEach(meta => {        const row = document.createElement('tr');        row.innerHTML = `            <td>${meta.ano}</td>            <td>${formatarMes(meta.mes)}</td>            <td><span class="valor-mensal">${formatarMoeda(meta.meta)}</span></td>            <td>${formatarData(meta.created_at)}</td>            <td>                <button class="btn btn-warning btn-sm" onclick="editarItem(${meta.id}, 'financeiro')">                    <i class="mdi mdi-pencil"></i>                </button>                <button class="btn btn-warning btn-sm" onclick="excluirItem(${meta.id})" style="margin-left: 5px;">                    <i class="mdi mdi-delete"></i>                </button>            </td>        `;        tbody.appendChild(row);    });}function atualizarEstatisticas() {    const metas = dados.filter(item => item.tipo === 'meta' && !item.mes).length;    const projecoes = dados.filter(item => item.tipo === 'projecao' && !item.mes).length;    const mensais = dados.filter(item => item.tipo === 'financeiro' && item.mes).length;        document.getElementById('total-metas').textContent = metas;    document.getElementById('total-projecoes').textContent = projecoes;    document.getElementById('total-mensais').textContent = mensais;}function abrirModal(tipo) {    tipoEdicao = tipo;    editandoItem = null;        if (tipo === 'financeiro') {        // Modal mensal        document.getElementById('modal-title-mensal').textContent = 'Nova Meta Mensal';        document.getElementById('meta-mensal-ano').value = '2025';        document.getElementById('meta-mensal-mes').value = '01';        document.getElementById('meta-mensal-valor').value = '';        document.getElementById('modal-overlay-mensal').style.display = 'flex';    } else {        // Modal anual        const titulo = tipo === 'meta' ? 'Nova Meta Anual' : 'Nova Projeção Anual';        document.getElementById('modal-title-anual').textContent = titulo;        document.getElementById('meta-ano').value = '2025';        document.getElementById('meta-valor').value = '';        document.getElementById('modal-overlay-meta').style.display = 'flex';    }}function editarItem(itemId, tipo) {    const item = dados.find(d => d.id === itemId);    if (!item) {        mostrarToast('Item não encontrado', 'error');        return;    }        tipoEdicao = tipo;    editandoItem = item;        if (tipo === 'financeiro') {        // Modal mensal        document.getElementById('modal-title-mensal').textContent = 'Editar Meta Mensal';        document.getElementById('meta-mensal-ano').value = item.ano;        document.getElementById('meta-mensal-mes').value = item.mes;        document.getElementById('meta-mensal-valor').value = item.meta;        document.getElementById('modal-overlay-mensal').style.display = 'flex';    } else {        // Modal anual        const titulo = tipo === 'meta' ? 'Editar Meta Anual' : 'Editar Projeção Anual';        document.getElementById('modal-title-anual').textContent = titulo;        document.getElementById('meta-ano').value = item.ano;        document.getElementById('meta-valor').value = item.meta;        document.getElementById('modal-overlay-meta').style.display = 'flex';    }}function fecharModal(modalTipo) {    if (modalTipo === 'mensal') {        document.getElementById('modal-overlay-mensal').style.display = 'none';    } else {        document.getElementById('modal-overlay-meta').style.display = 'none';    }    editandoItem = null;    tipoEdicao = null;}function salvarItem() {    let dadosItem;        if (tipoEdicao === 'financeiro') {        dadosItem = {            ano: document.getElementById('meta-mensal-ano').value,            mes: document.getElementById('meta-mensal-mes').value,            meta: parseInt(document.getElementById('meta-mensal-valor').value),            tipo: 'financeiro'        };    } else {        dadosItem = {            ano: document.getElementById('meta-ano').value,            meta: parseInt(document.getElementById('meta-valor').value),            tipo: tipoEdicao,            mes: null        };    }        // Validação    if (!dadosItem.ano || !dadosItem.meta || !dadosItem.tipo) {        mostrarToast('Preencha todos os campos obrigatórios', 'warning');        return;    }        mostrarLoading(true);        let url, method;    if (editandoItem) {        url = `/financeiro/projecoes-metas/api/atualizar/${editandoItem.id}`;        method = 'PUT';    } else {        url = '/financeiro/projecoes-metas/api/criar';        method = 'POST';    }        fetch(url, {        method: method,        headers: {            'Content-Type': 'application/json',        },        body: JSON.stringify(dadosItem)    })    .then(response => response.json())    .then(data => {        if (data.success) {            mostrarToast(data.message || 'Salvo com sucesso', 'success');            fecharModal(tipoEdicao === 'financeiro' ? 'mensal' : 'meta');            buscarDados(); // Recarregar dados        } else {            mostrarToast(data.error || 'Erro ao salvar', 'error');        }    })    .catch(error => {        console.error('[PROJECOES] Erro ao salvar:', error);        mostrarToast('Erro de comunicação com o servidor', 'error');    })    .finally(() => {        mostrarLoading(false);    });}function excluirItem(itemId) {    if (!confirm('Tem certeza que deseja excluir este item?')) {        return;    }        mostrarLoading(true);        fetch(`/financeiro/projecoes-metas/api/excluir/${itemId}`, {        method: 'DELETE'    })    .then(response => response.json())    .then(data => {        if (data.success) {            mostrarToast(data.message || 'Excluído com sucesso', 'success');            buscarDados(); // Recarregar dados        } else {            mostrarToast(data.error || 'Erro ao excluir', 'error');        }    })    .catch(error => {        console.error('[PROJECOES] Erro ao excluir:', error);        mostrarToast('Erro de comunicação com o servidor', 'error');    })    .finally(() => {        mostrarLoading(false);    });}function limparFiltros() {    document.getElementById('ano-filtro').value = '2025';    document.getElementById('tipo-filtro').value = '';    buscarDados();}function mostrarLoading(mostrar) {    document.getElementById('loading-overlay').style.display = mostrar ? 'flex' : 'none';}function mostrarToast(mensagem, tipo = 'info') {    const toast = document.createElement('div');    toast.className = `toast toast-${tipo}`;    toast.textContent = mensagem;        const container = document.getElementById('toast-container');    container.appendChild(toast);        setTimeout(() => toast.classList.add('show'), 100);        setTimeout(() => {        toast.classList.remove('show');        setTimeout(() => container.removeChild(toast), 300);    }, 3000);}function formatarMoeda(valor) {    return new Intl.NumberFormat('pt-BR', {        style: 'currency',        currency: 'BRL'    }).format(valor || 0);}function formatarData(data) {    if (!data) return '-';    return new Date(data).toLocaleDateString('pt-BR');}function formatarMes(mes) {    const meses = {        '01': 'Janeiro', '02': 'Fevereiro', '03': 'Março',        '04': 'Abril', '05': 'Maio', '06': 'Junho',        '07': 'Julho', '08': 'Agosto', '09': 'Setembro',        '10': 'Outubro', '11': 'Novembro', '12': 'Dezembro'    };    return meses[mes] || mes;}