import requests
import os
from dotenv import load_dotenv

# Carrega vari√°veis de ambiente
load_dotenv()

# Configura√ß√£o da API
API_BYPASS_KEY = os.getenv('API_BYPASS_KEY')
BASE_URL = 'http://localhost:5000'

headers = {
    'X-API-Key': API_BYPASS_KEY,
    'Content-Type': 'application/json'
}

def test_dashboard_improvements():
    """Testa as melhorias implementadas no dashboard executivo"""
    print("\n=== TESTE: Melhorias do Dashboard Executivo ===")
    
    try:
        response = requests.get(f"{BASE_URL}/dashboard-executivo/", headers=headers, timeout=30)
        if response.status_code != 200:
            print(f"‚ùå Dashboard n√£o acess√≠vel: {response.status_code}")
            return False
            
        content = response.text
        
        # 1. Verificar se o bot√£o de reset de filtros est√° presente
        if 'reset-filters' in content:
            print("‚úÖ Bot√£o de reset de filtros encontrado")
        else:
            print("‚ùå Bot√£o de reset de filtros n√£o encontrado")
            
        # 2. Verificar se os estilos para √≠cones de modal est√£o presentes
        if 'modal-icon-badge' in content:
            print("‚úÖ Estilos para √≠cones de modal encontrados")
        else:
            print("‚ùå Estilos para √≠cones de modal n√£o encontrados")
            
        # 3. Verificar se a tabela tem a coluna de status
        if 'data-sort="status"' in content:
            print("‚úÖ Coluna de status na tabela encontrada")
        else:
            print("‚ùå Coluna de status na tabela n√£o encontrada")
            
        return True
        
    except Exception as e:
        print(f"‚ùå Erro ao testar dashboard: {str(e)}")
        return False

def test_recent_operations_api():
    """Testa se a API de opera√ß√µes recentes est√° retornando os dados de status"""
    print("\n=== TESTE: API de Opera√ß√µes Recentes ===")
    
    try:
        response = requests.get(f"{BASE_URL}/dashboard-executivo/api/recent-operations", headers=headers, timeout=30)
        if response.status_code != 200:
            print(f"‚ùå API n√£o acess√≠vel: {response.status_code}")
            return False
            
        data = response.json()
        
        if not data.get('success'):
            print(f"‚ùå API retornou erro: {data.get('error', 'Erro desconhecido')}")
            return False
            
        operations = data.get('operations', [])
        if not operations:
            print("‚ö†Ô∏è  Nenhuma opera√ß√£o encontrada")
            return True
            
        # Verificar se as opera√ß√µes t√™m os campos de status
        first_operation = operations[0]
        
        status_fields = ['status_processo', 'status_macro_sistema', 'status']
        status_found = any(field in first_operation for field in status_fields)
        
        if status_found:
            print("‚úÖ Campos de status encontrados nas opera√ß√µes")
            print(f"Campos dispon√≠veis: {[field for field in status_fields if field in first_operation]}")
        else:
            print("‚ùå Nenhum campo de status encontrado nas opera√ß√µes")
            print(f"Campos dispon√≠veis: {list(first_operation.keys())}")
            
        return status_found
        
    except Exception as e:
        print(f"‚ùå Erro ao testar API: {str(e)}")
        return False

def main():
    """Executa todos os testes das melhorias"""
    print("üöÄ TESTANDO MELHORIAS DO DASHBOARD EXECUTIVO")
    print("=" * 60)
    
    tests_results = []
    
    # Executa os testes
    tests_results.append(test_dashboard_improvements())
    tests_results.append(test_recent_operations_api())
    
    # Resultado final
    print("\n" + "=" * 60)
    passed = sum(tests_results)
    total = len(tests_results)
    
    if passed == total:
        print(f"‚úÖ TODOS OS TESTES PASSARAM ({passed}/{total})")
        print("üéâ MELHORIAS IMPLEMENTADAS COM SUCESSO!")
        print("\nüìã MELHORIAS APLICADAS:")
        print("  1. ‚úÖ Bot√£o de reset/remover filtros adicionado")
        print("  2. ‚úÖ Popup de confirma√ß√£o removido dos filtros")
        print("  3. ‚úÖ Valores dos eixos removidos dos gr√°ficos")
        print("  4. ‚úÖ √çcones de modal centralizados e maiores")
        print("  5. ‚úÖ Campo de status adicionado √† API")
    else:
        print(f"‚ùå ALGUNS TESTES FALHARAM ({passed}/{total})")
        print("‚ö†Ô∏è  VERIFICAR PROBLEMAS NAS MELHORIAS")
    
    return passed == total

if __name__ == "__main__":
    success = main()
    if not success:
        exit(1)
