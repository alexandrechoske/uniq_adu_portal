import requests
import os
from dotenv import load_dotenv

# Carrega vari√°veis de ambiente
load_dotenv()

# Configura√ß√£o da API
API_BYPASS_KEY = os.getenv('API_BYPASS_KEY')
BASE_URL = 'http://localhost:5000'

headers = {
    'X-API-Key': API_BYPASS_KEY,
    'Content-Type': 'application/json'
}

def test_dashboard_materiais_removal():
    """Testa se o dashboard materiais foi removido"""
    print("\n=== TESTE: Verifica√ß√£o de Remo√ß√£o do Dashboard Materiais ===")
    
    # Tenta acessar a rota do dashboard materiais (deve falhar)
    try:
        response = requests.get(f"{BASE_URL}/dashboard-materiais/", headers=headers, timeout=10)
        if response.status_code == 404:
            print("‚úÖ Dashboard Materiais removido - rota retorna 404")
            return True
        else:
            print(f"‚ùå Dashboard Materiais ainda acess√≠vel: {response.status_code}")
            return False
    except requests.exceptions.ConnectionError:
        print("‚úÖ Dashboard Materiais removido - rota n√£o encontrada")
        return True
    except Exception as e:
        print(f"‚úÖ Dashboard Materiais removido - erro esperado: {str(e)}")
        return True

def test_dashboard_executivo_working():
    """Testa se o dashboard executivo est√° funcionando"""
    print("\n=== TESTE: Verifica√ß√£o do Dashboard Executivo ===")
    
    try:
        response = requests.get(f"{BASE_URL}/dashboard-executivo/", headers=headers, timeout=10)
        if response.status_code == 200:
            print("‚úÖ Dashboard Executivo acess√≠vel e funcionando")
            
            # Verifica se cont√©m elementos de materiais integrados
            content = response.text
            if 'principais-materiais-table' in content:
                print("‚úÖ Tabela de materiais integrada encontrada")
            else:
                print("‚ùå Tabela de materiais n√£o encontrada no dashboard executivo")
                
            if 'filter-modal' in content:
                print("‚úÖ Modal de filtros encontrado")
            else:
                print("‚ùå Modal de filtros n√£o encontrado")
                
            return True
        else:
            print(f"‚ùå Dashboard Executivo com erro: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå Erro ao acessar Dashboard Executivo: {str(e)}")
        return False

def test_menu_navigation():
    """Testa se o menu foi atualizado corretamente"""
    print("\n=== TESTE: Verifica√ß√£o do Menu de Navega√ß√£o ===")
    
    try:
        response = requests.get(f"{BASE_URL}/menu/dashboards", headers=headers, timeout=10)
        if response.status_code == 200:
            content = response.text
            
            # Verifica se n√£o h√° mais refer√™ncia ao dashboard materiais
            if 'Dashboard Materiais' not in content:
                print("‚úÖ Dashboard Materiais removido do menu")
            else:
                print("‚ùå Dashboard Materiais ainda presente no menu")
                return False
                
            # Verifica se o dashboard executivo menciona an√°lise de materiais
            if 'an√°lise de materiais integrada' in content or 'materiais integrada' in content:
                print("‚úÖ Dashboard Executivo atualizado com descri√ß√£o de materiais")
            else:
                print("‚ùå Descri√ß√£o de materiais n√£o encontrada no Dashboard Executivo")
                
            return True
        else:
            print(f"‚ùå Menu com erro: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå Erro ao acessar menu: {str(e)}")
        return False

def main():
    """Executa todos os testes de verifica√ß√£o da migra√ß√£o"""
    print("üöÄ INICIANDO TESTES DE VERIFICA√á√ÉO DA MIGRA√á√ÉO")
    print("=" * 60)
    
    tests_results = []
    
    # Executa os testes
    tests_results.append(test_dashboard_materiais_removal())
    tests_results.append(test_dashboard_executivo_working())
    tests_results.append(test_menu_navigation())
    
    # Resultado final
    print("\n" + "=" * 60)
    passed = sum(tests_results)
    total = len(tests_results)
    
    if passed == total:
        print(f"‚úÖ TODOS OS TESTES PASSARAM ({passed}/{total})")
        print("üéâ MIGRA√á√ÉO CONCLU√çDA COM SUCESSO!")
    else:
        print(f"‚ùå ALGUNS TESTES FALHARAM ({passed}/{total})")
        print("‚ö†Ô∏è  VERIFICAR PROBLEMAS NA MIGRA√á√ÉO")
    
    return passed == total

if __name__ == "__main__":
    success = main()
    if not success:
        exit(1)
